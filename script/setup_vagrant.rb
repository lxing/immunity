#!/usr/bin/env ruby-local-exec
# Sets up vagrant for your developer machine. This script:
# 1. Modifies .ssh/config file so you can log in to Vagrant using `ssh immunity_system_vagrant`
#    instead of `vagrant ssh` (which is required to deploy to Vagrant).
# 2. Transfers your public key so you can log into the Vagrant box as root.

def setup
  run_command("vagrant up")
  setup_ssh_config
end

def setup_ssh_config
  begin
    ssh_config_path = File.expand_path("~/.ssh/config")
    run_command("cp ~/.ssh/config ~/.ssh/config.bak")
    vagrant_ssh_config = run_command("vagrant ssh-config -h immunity_system_vagrant")

    # The ssh config block generated by Vagrant looks like this if you're curious:
    # Host immunity_system_vagrant
    #   HostName 127.0.0.1
    #   User vagrant
    #   Port 2222
    #   UserKnownHostsFile /dev/null
    #   StrictHostKeyChecking no
    #   PasswordAuthentication no
    #   IdentityFile /Users/philc/.vagrant.d/insecure_private_key
    #   IdentitiesOnly yes

    original_ssh_config = File.read(ssh_config_path)
    File.open(ssh_config_path, "w") { |file| file.write(vagrant_ssh_config + original_ssh_config) }

    # Copy your public key to the vagrant machine and add it to root's authorized_keys, so you can ssh as root.
    `scp ~/.ssh/id_dsa.pub immunity_system_vagrant:~/`
    commands = %Q(sudo sh -c "mkdir -p /root/.ssh; cat id_dsa.pub >> /root/.ssh/authorized_keys")
    run_command "ssh immunity_system_vagrant '#{commands}'"

    # Change your local .ssh/config to use root to login to vagrant.
    vagrant_ssh_config = vagrant_ssh_config.split("\n").
        reject { |line| line.match(/User|UserKnownHostsFile|IdentifyFile/) }.join("\n")
    vagrant_ssh_config += "\n  User root\n\n"

    File.open(ssh_config_path, "w") { |file| file.write(vagrant_ssh_config + original_ssh_config) }
  ensure
    `rm ~/.ssh/config.bak`
  end
end

# Runs the given command and raises an exception if its status code is nonzero.
# Returns the stdout of the command.
def run_command(command)
  require "open3"
  puts command
  stdout, stderr, status = Open3.capture3(command)
  Open3.popen3(command) { |stdin, stdout, stderr| stdout_stream = stdout }
  raise %Q(The command "#{command}" failed: #{stderr}) unless status == 0
  stdout
end

setup()